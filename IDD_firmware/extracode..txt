/* MAIN CODE
   Restructured on May 2021
   JARK Industries
   Ricardo Bravo, Kyle McCaffrey, Ashley Powell, Jonathan Kiing
*/ #define WIFI 1 // NOT YET COMPLETED, WILL STAY AT 0
/*************************************************************************************************************
   Needed libraries
**************************************************************************************************************/
#include <driver/adc.h>
#include <Wire.h>
#include <WebServer.h>
//#include <WebSocketsServer.h>
#include <WiFi.h>
#include <WiFiUdp.h>
/*************************************************************************************************************
   Preprocessor defined Variables
**************************************************************************************************************/

// https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/peripherals/adc.html
// #define SENSE1 16 //A2
// #define SENSE2 15 //A1
// #define SENSE3 14 //A0
/**************************************************************************************************************/
// FSR Pins (Note, ADC2 is used by wifi - ADC1: GPIO32-GPIO39 are the ones available)
// NEW ASSIGNMENT OF PINS

#define FSR_IN_13 26 //IO26 - A0 - Might be useless since ADC2 is used by wifi, same as below 
#define FSR_IN_24 25 //IO25 - A1
#define FSR_IN_5  39  //SENSOR_VN/39??? - A3

#define FSR34_V 13
#define FSR12_V 32
#define FSR5_V 33

//IMU I2C Communication - Although not needed
#define IMU_SCL 22 //A5
#define IMU_SDA 23 //A4
/**************************************************************************************************************/
// FSR Debugging variables
#define SENSEX 32
#define POWERX 12
/**************************************************************************************************************/
// TCP STUFF

// NETWORK CREDENTIALS
const char* ssid = "eduroam";    // <<< change this as yours
const char* password = "0MGSM5WK1J17"; // <<< change this as your

//TCP Server (DATA RECEIVER)
const char* host = "192.168.1.10";
//const char* host = "10.0.0.37";
const int port = 6001;

/* Put IP Address details */
// This will be the WIFI values of this device
IPAddress local_ip(192, 168, 1, 1);
IPAddress gateway(192, 168, 1, 1);
IPAddress subnet(255, 255, 255, 0);
WebServer server(80);
/**************************************************************************************************************/
// DATA TO BE SENT

typedef struct TCP_Packet_t {
  byte FSR_X;
  byte FSR_Y;
  byte FSR_Z;
  byte ZONE_LOC;
  byte acc_x;
  byte acc_y;
  byte acc_z;
  byte theta;
  byte zeta;
  byte Fnet;
} dataSent_t1;
  dataSent_t1 dataSent_t;
static int tcpLOCK = 0;
/**************************************************************************************************************/
void testModemSleep();
//const char* ssid = "Nacho Wi-Fi";    // <<< change this as yours
//const char* password = "0MGSM5WK1J17"; // <<< change this as yours


/*************************************************************************************************************
   MAIN CODE
   SETUP() -> MAIN()
**************************************************************************************************************/
void setup()
{
  //Serial Initialization - Baud Rate: 115200 Hz
  Serial.begin(115200);

  //  Wire.begin(IMU_SDA, IMU_SCL);
  while (!Serial) {
    ;
  }

  // Initialize components - FSR, IMUs, WiFi (TCP)
  initialize_FSR_matrix();
    initialize_IMU();
  // initialize_wifi_ESP32();


   initialize_AccessPoint_ESP32(); // For TCP testing (working)
  delay(200);
  Serial.println("READY");


  dataSent_t.FSR_X = 100;
  dataSent_t.FSR_Y = 101;
  dataSent_t.FSR_Z = 102;
  dataSent_t.ZONE_LOC = 103;
  dataSent_t.acc_x = 104;
  dataSent_t.acc_y = 105;
  dataSent_t.acc_z = 106;
  dataSent_t.theta = 107;
  dataSent_t.zeta = 108;
  dataSent_t.Fnet = 109;
  // End of setup
}

// DEVICE MAIN LOOP
void loop()
{

  //    Serial.println(read_impact_coordinates());
//    if(returnFSRSum() > 0){
//      /* This will send the data to the server */
//      Serial.println("DATA SENDING......");
//      //client.print(fsrReading); //Replace with the struct
//      //client.stop();
//        byte *ptr = (byte *) &dataSent_t;
//        for (int i = 0; i < sizeof(dataSent_t1); i++) 
//        {
////            client.write(*ptr);
//            Serial.print(String(i) + ": ");
//            Serial.println(*ptr);
//            ptr++;
//        }
//       Serial.println("====================================");
//    }

  // DEBUG
  //    if (WifiSerial.available())
  //      Serial.write(WifiSerial.read());
  //    if (Serial.available())
  //      WifiSerial.write(Serial.read());

  // Send over WiFi
  //    String location = read_impact_coordinates(); //x:0.00,y:0.00,Z:0.00
  //    String acc = read_IMU();                     //ax:0.00,ay:0.00,ay:0.00
  //    String data = location + "," + acc; //x:0.00,y:0.00,Z:0.00,ax:0.00,ay:0.00,ay:0.00
  //https://forum.arduino.cc/t/esp8266-with-wificlient-library-to-send-data-through-wificlient-write/616685/6

  if (returnZone > 0) {
    //IMPACT DETECTED. TURN ON WIFI
  }
//Serial.println(read_IMU());  
/*

    if(returnZone > 0){

      // Check Struct Values
      // Initiate TCP Connnection
      // Connect to TCP Server
      // Send to TCP Server ONCE
      // ** Create a lock
      //int lock = 0;
     // connect -> send -> lock = 1
      // Put conditional (if lock == 0){ Initiate Sequence; }

    }
  */

//  if(read_IMU() > 300.0){
//  tcpLOCK = 1;
//}else{
//  // nothing
//}
//
//if(tcpLOCK){
//  Serial.println(returnFSRSum());
//  tcpLOCK=0;
//}else{
//  
//}
#if WIFI

//  if (returnFSRSum() > 0) {
//    //
//    tcpLOCK = 1;
//  } else {
//  }
//Serial.println("Wifi...");
float fsrReading = returnFSRSum();
//Serial.println(read_IMU());
if(read_IMU() > 50.0){
  tcpLOCK = 1;
}else{
  // nothing
}

if(tcpLOCK){
  Serial.println(returnFSRSum());
//  tcpLOCK=0;
}else{

}
  int tcpLOCK2 = 0;
  if(tcpLOCK){
    /* Use WiFiClient class to create TCP connections */
    WiFiClient client;
    int sendData = 0;
    Serial.println("Connecting....");
    if (!client.connect(host, port)) {
      Serial.println("connection failed");
      tcpLOCK = 0;
      return;
    } else {
      Serial.println("Connected to host");
      sendData = 1;
    }
//    Serial.println(sendData);

    if(sendData){
       client.print(fsrReading); //Replace with the struct
      client.stop();
    }
    int sendData2 = 0;
    if(sendData2){
      /* This will send the data to the server */
      Serial.println("DATA SENDING......");
      //client.print(fsrReading); //Replace with the struct
      //client.stop();
        byte *ptr = (byte *) &dataSent_t;
        for (int i = 0; i < sizeof(dataSent_t1); i++) 
        {
            client.write(*ptr);
            Serial.print(String(i) + ": ");
            Serial.println(*ptr);
            ptr++;
        }
       Serial.println("====================================");
    }
    //    Serial.println("WiFi.mode(WIFI_STA)..."); WiFi.mode(WIFI_STA); delay(1000);
    //     Serial.println("\nAttempting to connect to SSID for a 2nd time (this is where it might fail).");
    //    WiFi.begin(ssid, password);
    //    while (WiFi.status() != WL_CONNECTED) {Serial.println("."); delay(1000);}
    //   Serial.println("WIFI CONNNECTED - SENDING DATA....");

    tcpLOCK = 0;
  }
  delay(10);
  //
  //   Serial.println("Try to access the server");
  //    if (client.connect(host, port)) //Try to access the target address
  //    {
  //        Serial.println("Visit successful");
  //
  //        client.print("Hello world!");                    //Send data to the server
  //        while (client.connected() || client.available()) //If it is connected or has received unread data
  //        {
  //            if (client.available()) //If there is data to read
  //            {
  //                String line = client.readStringUntil('\n'); //Read data to newline
  //                Serial.print("Read data:");
  //                Serial.println(line);
  //                client.write(line.c_str()); //Send the received data back
  //            }
  //        }
  //        Serial.println("Close the current connection");
  //        client.stop(); //Close the client
  //    }
  //    else
  //    {
  //        Serial.println("Access failed");
  //        client.stop(); //Close the client
  //    }
  //    delay(5000);
#endif
} // END MAIN




/********************************************************************************************************
    THIS IS THE END OF THE MAIN PROGRAM
   THE CODE BELOW MIGHT BE REUSED; IT WILL BE DELETED FOR FINAL RELEASE
*/


//delete later
//void test_send(String msg) {
//    initialize_connection("192.168.1.117", 6000);
//    delay(10);
//    send_msg(msg);
//    delay(10);
//    SendCommand("AT+CIPCLOSE", "OK");
//    delay(10);
//}

//
//void testModemSleep() {
//  Serial.begin(115200); delay(100);
//  Serial.println("\nWait 3s"); delay(3000);
//  Serial.print("\nAttempting to connect to SSID.");
//  WiFi.begin(ssid, password);
//  while (WiFi.status() != WL_CONNECTED) {Serial.println("."); delay(1000);}
//  Serial.println("Connected ok");
//  delay(5000);
//  Serial.println("Wifi.disconnect..."); WiFi.disconnect(); delay(5);
//  Serial.println("WiFi.mode(WIFI_OFF)..."); WiFi.mode(WIFI_OFF);
//  delay(5000);
//  Serial.println("WiFi.mode(WIFI_STA)..."); WiFi.mode(WIFI_STA); delay(1000);
//  Serial.println("\nAttempting to connect to SSID for a 2nd time (this is where it might fail).");
//  WiFi.begin(ssid, password);
//  while (WiFi.status() != WL_CONNECTED) {Serial.println("."); delay(1000);}
//  // with ESP32-arduino-github as at 23Nov19, this sketch hangs on the
//  // above line with the error "esp_wifi_disconnect 1153 wifi not start"
//  // (unless the "WiFiGeneric.cpp" file is edited as described in above post)
//  Serial.println("Connected ok");
//  delay(5000);
//  WiFi.disconnect(); delay(5); Serial.println("Wifi.disconnect (you can press the 'reset' button now)");
//}

//void setup() {
//  Serial.begin(115200); delay(100);
//  Serial.println("\nWait 3s"); delay(3000);
//  Serial.print("\nAttempting to connect to SSID.");
//  WiFi.begin(ssid, password);
//  while (WiFi.status() != WL_CONNECTED) {Serial.println("."); delay(1000);}
//  Serial.println("Connected ok");
//  delay(5000);
//  Serial.println("Wifi.disconnect..."); WiFi.disconnect(); delay(5);
//  Serial.println("WiFi.mode(WIFI_OFF)..."); WiFi.mode(WIFI_OFF);
//  delay(5000);
////  Serial.println("WiFi.mode(WIFI_STA)..."); WiFi.mode(WIFI_STA); delay(1000);
////  Serial.println("\nAttempting to connect to SSID for a 2nd time (this is where it might fail).");
////  WiFi.begin(ssid, password);
////  while (WiFi.status() != WL_CONNECTED) {Serial.println("."); delay(1000);}
//  // with ESP32-arduino-github as at 23Nov19, this sketch hangs on the
//  // above line with the error "esp_wifi_disconnect 1153 wifi not start"
////  // (unless the "WiFiGeneric.cpp" file is edited as described in above post)
////  Serial.println("Connected ok");
////  delay(5000);
////  WiFi.disconnect(); delay(5); Serial.println("Wifi.disconnect (you can press the 'reset' button now)");
//}


/////////////////////////////////////////////
//
//
//#if WIFI
//  fsrReading = analogRead(SENSEX);
//
//  if (fsrReading < 10) {
//    //Serial.println(" - No pressure");
//  } else if (fsrReading < 200) {
//    //Serial.println(" - Light touch");
//  } else if (fsrReading < 500) {
//    //Serial.println(" - Light squeeze");
//  } else if (fsrReading < 800) {
//    //Serial.println(" - Medium squeeze");
//  } else {
//
//
//    Serial.print("Analog reading: ");
//    Serial.println(fsrReading);
//    Serial.println("HEAD COLLISION DETECTED - ACTIVATING WIFI....");
//
//    Serial.print("connecting to ");
//    Serial.println(host);
//
//    /* Use WiFiClient class to create TCP connections */
//    WiFiClient client;
//
//    if (!client.connect(host, port)) {
//      Serial.println("connection failed");
//      return;
//    } else {
//      Serial.println("Connected to host");
//    }
//
//    /* This will send the data to the server */
//    client.print(fsrReading);
//    client.stop();
//
//    //    Serial.println("WiFi.mode(WIFI_STA)..."); WiFi.mode(WIFI_STA); delay(1000);
//    //     Serial.println("\nAttempting to connect to SSID for a 2nd time (this is where it might fail).");
//    //    WiFi.begin(ssid, password);
//    //    while (WiFi.status() != WL_CONNECTED) {Serial.println("."); delay(1000);}
//    //   Serial.println("WIFI CONNNECTED - SENDING DATA....");
//  }
//  delay(10);
//  //
//  //   Serial.println("Try to access the server");
//  //    if (client.connect(host, port)) //Try to access the target address
//  //    {
//  //        Serial.println("Visit successful");
//  //
//  //        client.print("Hello world!");                    //Send data to the server
//  //        while (client.connected() || client.available()) //If it is connected or has received unread data
//  //        {
//  //            if (client.available()) //If there is data to read
//  //            {
//  //                String line = client.readStringUntil('\n'); //Read data to newline
//  //                Serial.print("Read data:");
//  //                Serial.println(line);
//  //                client.write(line.c_str()); //Send the received data back
//  //            }
//  //        }
//  //        Serial.println("Close the current connection");
//  //        client.stop(); //Close the client
//  //    }
//  //    else
//  //    {
//  //        Serial.println("Access failed");
//  //        client.stop(); //Close the clientK
//  //    }
//  //    delay(5000);
//#endif